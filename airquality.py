# -*- coding: utf-8 -*-
"""Airquality

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Zpq4D9Pofoki1UNrG8T70s2oYRgD-Wd3
"""

import warnings
warnings.filterwarnings("ignore")

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.metrics import mean_absolute_error, mean_squared_error, r2_score
from prophet import Prophet
file_path = "/content/air_pollution_data.csv"
df = pd.read_csv(file_path)
print("Columns:", df.columns.tolist())
display(df.head())
df["DateTime"] = pd.to_datetime(df["date"], format="%d-%m-%Y", errors="coerce")
df = df.dropna(subset=["DateTime"]).sort_values("DateTime").reset_index(drop=True)
num_cols = df.select_dtypes(include=[np.number]).columns.tolist()
for c in num_cols:
    df[c] = df[c].fillna(df[c].mean())
print("Missing values:\n", df.isna().sum())
target_col = "pm2_5"
print("Target pollutant:", target_col)
prophet_df = df[["DateTime", target_col]].rename(columns={"DateTime":"ds", target_col:"y"})
split_idx = int(len(prophet_df) * 0.8)
train_df = prophet_df.iloc[:split_idx]
test_df = prophet_df.iloc[split_idx:]
print("Train size:", len(train_df), " Test size:", len(test_df))
m = Prophet()
m.fit(train_df)
future = m.make_future_dataframe(periods=30, freq="D")
forecast = m.predict(future)
print("Forecast sample:")
display(forecast[["ds","yhat","yhat_lower","yhat_upper"]].tail())
merged = pd.merge(
    test_df.rename(columns={"ds":"ds", "y":"actual"}),
    forecast[["ds","yhat"]],
    on="ds", how="inner"
)

mae = mean_absolute_error(merged["actual"], merged["yhat"])
rmse = np.sqrt(mean_squared_error(merged["actual"], merged["yhat"]))
r2 = r2_score(merged["actual"], merged["yhat"])
print(f"\nEvaluation Metrics for {target_col}:")
print(f"MAE  = {mae:.3f}")
print(f"RMSE = {rmse:.3f}")
print(f"RÂ²   = {r2:.3f}")
plt.figure(figsize=(12,5))
plt.plot(merged["ds"], merged["actual"], label="Actual", alpha=0.7)
plt.plot(merged["ds"], merged["yhat"], label="Predicted", alpha=0.7)
plt.title(f"Actual vs Predicted ({target_col})")
plt.xlabel("Date")
plt.ylabel(target_col)
plt.legend()
plt.show()
pollutants = ["pm2_5", "pm10", "no2"]
results = {}
for target_col in pollutants:
    print("\n" + "="*60)
    print(f" Target pollutant: {target_col}")
    print("="*60)
    prophet_df = df[["DateTime", target_col]].rename(columns={"DateTime":"ds", target_col:"y"})
    split_idx = int(len(prophet_df) * 0.8)
    train_df = prophet_df.iloc[:split_idx]
    test_df = prophet_df.iloc[split_idx:]
    m = Prophet()
    m.fit(train_df)
    future = m.make_future_dataframe(periods=30, freq="D")
    forecast = m.predict(future)
    merged = pd.merge(
        test_df.rename(columns={"ds":"ds", "y":"actual"}),
        forecast[["ds","yhat"]],
        on="ds", how="inner"
    )
    mae = mean_absolute_error(merged["actual"], merged["yhat"])
    rmse = np.sqrt(mean_squared_error(merged["actual"], merged["yhat"]))
    r2 = r2_score(merged["actual"], merged["yhat"])
    results[target_col] = {"MAE": mae, "RMSE": rmse, "RÂ²": r2}
    print(f"MAE  = {mae:.3f}")
    print(f"RMSE = {rmse:.3f}")
    print(f"RÂ²   = {r2:.3f}")
    plt.figure(figsize=(12,5))
    plt.plot(merged["ds"], merged["actual"], label="Actual", alpha=0.7)
    plt.plot(merged["ds"], merged["yhat"], label="Predicted", alpha=0.7)
    plt.title(f"Actual vs Predicted ({target_col.upper()})")
    plt.xlabel("Date")
    plt.ylabel(target_col.upper())
    plt.legend()
    plt.show()
results_df = pd.DataFrame(results).T
print("\nðŸ“Š Comparison of Metrics:")
display(results_df)